% \DeclareSourceFile{ab}
%
% \section{The \modu{ab} module}
%
% \subsection{API}
%
% \begin{function}{\phy@ab@open,\phy@ab@close}
% \begin{syntax}
% \cs{phy@ab@open} \meta{left delimiter}
% \cs{phy@ab@close} \meta{right delimiter}
% \end{syntax}
% Their expansions are either \cs{delopen} \cs{delclose} or \cs{left} cs{right}.
% Which expansion is resulted in depends on the value of the \texttt{tightbraces}
% option of this module.
% \end{function}
%
% \begin{function}{\ab}
% \begin{syntax}
% \cs{ab} \meta{left delimiter} \meta{subformula} \meta{right delimiter}
% \cs{ab} \meta{\cs{biggg} or *} \meta{left delimiter} \meta{subformula} \meta{right delimiter}
% \end{syntax}
% User-level command.
% See the \pkg{physics2} package documentation.
% \end{function}
%
% \begin{function}{\@@_ab_ns_declare_cs:nN}
% \begin{syntax}
% \cs{@@_ab_ns_declare_cs:nN} \marg{namespace} \meta{command}
% \end{syntax}
% Declare a command like \cs{ab} in the namespace \meta{namespace}.
% \end{function}
%
% \subsection{Internal commands}
%
% \subsection{Code implementation}
%
%    \begin{macrocode}
%<*ab>
\ProvidesFile{phys.ab.sty}
  [2024/12/10 `ab' (autobraces) module of physics2]
%    \end{macrocode}
%
% In \modu{ab}, the \texttt{tightbraces} option determines if the 
% automatically-sized braces are tight or not.
%    \begin{macrocode}
\DeclareKeys{tightbraces.if=phy@ModBoolA}
\SetKeys{tightbraces=true}
\ProcessKeyOptions\relax
%    \end{macrocode}
%
% \begin{macro}{\phy@ab@open,\phy@ab@close}
%    \begin{macrocode}
\ifphy@ModBoolA
  \let\phy@ab@open\delopen
  \let\phy@ab@close\delclose
\else
  \let\phy@ab@open\left
  \let\phy@ab@close\right
\fi
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%<@@=phy>
\ExplSyntaxOn
%    \end{macrocode}
%
% \begin{macro}{\@@_ab_ns_declare_cs:nN}
%    \begin{macrocode}
\cs_set:Npn \@@_ab_ns_declare_cs:nN #1#2
  {
    % \DeclareRobustCommand #2 { \@@_ab:nN {#1} }
    \cs_new_protected:Npn #2 ##1 { \@@_ab:nN {#1} ##1 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_ab:nN}
%    \begin{macrocode}
\cs_set:Npn \@@_ab:nN #1#2
  {
    \ifcsname phy.ab.chk \string #2 \endcsname
      \def \phy@tempa {1}
    \else
      \def \phy@tempa {0}
    \fi
    \csname phy.ab.i. #1 \phy@tempa \endcsname #2
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_ab_use:c}
%    \begin{macrocode}
\cs_set:Npn \@@_ab_use:c #1 {\csname #1\endcsname}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_ab_declare_ns:n}
%    \begin{macrocode}
\cs_set:Npn \@@_ab_declare_ns:n #1
  {
    \long \expandafter \def \csname phy.ab.i. #1 0 \endcsname ##1
      {
        \@@_ab_use:c {phy.ab.ns. #1 0. \string ##1} ##1
      }
    \long \expandafter \def \csname phy.ab.i. #1 1 \endcsname ##1##2
      {
        \begingroup
        \ifx##1*
          \let \phy@tempa \@empty
        \else
          \let \phy@tempa ##1
        \fi
        \@@_ab_use:c {phy.ab.ns. #1 1. \string ##2} \phy@tempa ##2
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_ab_add_cs_to_ns:nNNNN,\@@_ab_add_sym_to_ns:nNNNN,\@@_ab_add_to_ns:nNNNN}
%    \begin{macrocode}
\cs_set:Npn \@@_ab_add_cs_to_ns:nNNNN #1#2#3#4#5
  {
    \exp_args:Nco \DeclareDocumentCommand { phy.ab.ns. #1 0. \string #2 } { +r #2#3 }
      { \phy@ab@open #4 ##1 \phy@ab@close #5 }
    \exp_args:Nco \DeclareDocumentCommand { phy.ab.ns. #1 1. \string #2 } { m +r #2#3 }
      { \mathopen ##1 #4 ##2 \mathclose ##1 #5 \endgroup }
  }
\cs_set:Npn \@@_ab_add_sym_to_ns:nNNNN #1#2#3#4#5
  {
    \exp_args:Nco \DeclareDocumentCommand { phy.ab.ns. #1 0. \string #2 } { +r #2#3 }
      { \phy@ab@open #4 ##1 \phy@ab@close #5 }
    \exp_args:Nco \DeclareDocumentCommand { phy.ab.ns. #1 1. \string #2 } { m +r #2#3 }
      { \mathopen ##1 #4 ##2 \mathclose ##1 #5 \endgroup }
  }
\cs_set:Npn \@@_ab_add_to_ns:nNNNN #1#2#3#4#5
  {
    \@@_ab_add_cs_to_ns:nNNNN  {#1} #4 #5 #4 #5
    \@@_ab_add_sym_to_ns:nNNNN {#1} #2 #3 #4 #5
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phy@ab@declare@ns@n,\phy@ab@add@cs@to@ns@nNNNN,
%               \phy@ab@add@sym@to@ns@nNNNN,\phy@ab@add@to@ns@nNNNN,
%               \phy@ab@ns@declare@cs@n}
%    \begin{macrocode}
\cs_set_eq:NN \phy@ab@declare@ns@n        \@@_ab_declare_ns:n
\cs_set_eq:NN \phy@ab@add@cs@to@ns@nNNNN  \@@_ab_add_cs_to_ns:nNNNN
\cs_set_eq:NN \phy@ab@add@sym@to@ns@nNNNN \@@_ab_add_sym_to_ns:nNNNN
\cs_set_eq:NN \phy@ab@add@to@ns@nNNNN     \@@_ab_add_to_ns:nNNNN
\cs_set_eq:NN \phy@ab@ns@declare@cs@nN    \@@_ab_ns_declare_cs:nN
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ab}
%    \begin{macrocode}
\@@_ab_declare_ns:n       {ab}
\@@_ab_add_to_ns:nNNNN    {ab}  (      )     \lparen \rparen
\@@_ab_add_to_ns:nNNNN    {ab}  [      ]     \lbrack \rbrack
\@@_ab_add_to_ns:nNNNN    {ab} \{     \}     \lbrace \rbrace
\@@_ab_add_to_ns:nNNNN    {ab}  <      >     \langle \rangle
\@@_ab_add_to_ns:nNNNN    {ab}  |      |     \vert   \vert
\@@_ab_add_to_ns:nNNNN    {ab} \|     \|     \Vert   \Vert
\@@_ab_add_cs_to_ns:nNNNN {ab} \lvert \rvert \vert   \vert
\@@_ab_add_cs_to_ns:nNNNN {ab} \lVert \rVert \Vert   \Vert
\@@_ab_ns_declare_cs:nN   {ab} \ab
%    \end{macrocode}
% \end{macro}
%    \begin{macrocode}
\ExplSyntaxOff
%<@@=>
%    \end{macrocode}
%
% \begin{function}{\phy@AB@gen}
%   \begin{syntax}
%     \cs{phy@AB@gen} \marg{branch name} \meta{left delimiter} \marg{arg spec} \marg{definition}
%   \end{syntax}
% \end{function}
%    \begin{macrocode}
\def\phy@AB@gen#1#2{\expandafter\DeclareDocumentCommand\csname phy.ab.ns.#1.\string#2\endcsname}
%    \end{macrocode}
% \cs{endgroup}'s in the end of the following definitions are corresponding to
% \cs{begingroup}'s in the definition of \cs{phy@d@l@genxm}.
%    \begin{macrocode}
%    \end{macrocode}
% \begin{function}{\phy.ab.chk\biggg,\phy.ab.chk*}
%   \begin{syntax}
%     \cs{ifcsname} phy.ab.chk\cs{string}\meta{token to be tested}\cs{endcsname}
%   \end{syntax}
%   This is expanded to true only if \meta{token to be tested} is \texttt{*} or a command
%   like \cs{biggg}. This is related to \cs{DeclareBiggg} command in \texttt{physics2.sty}.
% \end{function}
% \begin{function}{\phy@d@lx}
%   \begin{syntax}
%     \cs{phy@d@lx} \marg{biggg or star branch name} \marg{automatic branch name} \meta{next token}
%   \end{syntax}
%   When \meta{next token} is a \texttt{*} or command like \cs{biggg}, let \cs{reserved@a} be 
%   \meta{biggg or star branch name}, that is, \texttt{mb}; when \meta{next token} is a left delimiter,
%   let \cs{reserved@a} be \meta{automatic branch name}, that is, \texttt{ab}. Finally this command is
%   expanded to \texttt{\cs{csname} phy@d@lx\meta{branch name}\cs{endcsname} \meta{next token}}.
% \end{function}
%    \begin{macrocode}
\long\def\phy@ab@main#1#2#3{%
  \ifcsname phy.ab.chk\string#3\endcsname\def\phy@tempa{#1}%
  \else\def\phy@tempa{#2}%
  \fi\csname phy.ab.i.\phy@tempa\endcsname#3}
%    \end{macrocode}
% \begin{function}{\phy@d@l@genxm, \phy@d@l@genxa}
%   \begin{syntax}
%     \cs{phy@d@l@genxm} \marg{biggg or star branch name}
%     \cs{phy@d@l@genxa} \marg{automatic branch name}
%   \end{syntax}
% \end{function}
%    \begin{macrocode}
\def\phy@d@l@genxm#1{%
  \long\expandafter\def\csname phy.ab.i.#1\endcsname##1##2{%
    \begingroup % \endgroup is at the end of #4 of \phy@AB@gen
    \ifx##1*\let\phy@tempa=\relax\else\let\phy@tempa=##1\fi
    \csname phy.ab.ns.#1.\string##2\endcsname\phy@tempa##2}}
\def\phy@d@l@genxa#1{%
  \long\expandafter\def\csname phy.ab.i.#1\endcsname##1{%
    \csname phy.ab.ns.#1.\string##1\endcsname##1}}
%    \end{macrocode}
% \begin{function}{\phy.ab.i.ab.m, \phy.ab.i.ab.a}
%   \begin{syntax}
%     \cs{phy.ab.i.ab.m} \meta{biggg or *} \meta{left delimiter} \meta{subformula} \meta{right delimiter}
%     \cs{phy.ab.i.ab.a} \phantom{\meta{biggg or *}} \meta{left delimiter} \meta{subformula} \meta{right delimiter}
%   \end{syntax}
% \end{function}
%    \begin{macrocode}
% \phy@d@l@genxm{ab1}
% \phy@d@l@genxa{ab0}
%    \end{macrocode}
% \begin{function}{\ab}
%   The users' command \cs{ab}.
% \end{function}
%    \begin{macrocode}
% \DeclareRobustCommand\ab{\phy@ab@main{ab1}{ab0}}
%</ab>
%    \end{macrocode}
%
% This is the alienest part of \modu{ab}. It's better to draw something rather
% than write boring comments. Let's take a look at \cs{ab}'s syntax.
% After \cs{ab} should be a pair of delimiters; take \texttt{()} as an example.
% Between \cs{ab} and ``\texttt{(}'' can be a biggg command or star, or even nothing.
% \cs{ab} is defined as follows:
% \[ \macrodef{ab}{\cs{phy@d@lx} \texttt{\{mb\}} \texttt{\{ab\}}} \]
% where \texttt{ab} is the branch name of |\ab()|, and \texttt{mb} is the branch
% name of |\ab\big()| and |\ab*()|. Then let's see the syntax of \cs{phy@d@lx}.
% \[ \hbox{\ttfamily\cs{phy@d@lx} \marg{star or biggg branch name} \marg{automatic branch name} \meta{tok}} \]
% Here exists \meta{tok} as \texttt{\#3}. It is one token immediately following \cs{ab},
% which can be \{\,a biggg command or a star\,\} or a ``\texttt{(}'', under our assumption.
% 
% \cs{phy@d@lx} is defined as follows:
% \[
%   \macrodef {phy@d@lx} [\#1: star or biggg branch name, \meta{mb}; \#2: automatic branch name, 
%                         \meta{ab}; \#3: the token after \cs{ab}, \meta{tok}]
%     {%
%       \macroifelse {\meta{tok} == biggg or \meta{tok} == star}
%         {let \meta{next cs} = csname \{phy@d@lx\meta{mb}\}}
%         {let \meta{next cs} = csname \{phy@d@lx\meta{ab}\}}
%       \meta{next cs} \meta{tok}
%     }
% \]
% The condition should be true when \meta{tok} is |\big| or |*|, and be false when
% \meta{tok} is ``|(|''. Accordingly,
% \begin{align*}
%   \hbox{\ttfamily\cs{ab} \cs{big} (}&\quad\to\quad\hbox{\ttfamily\cs{phy@d@lxmb} \cs{big} (}\\
%   \hbox{\ttfamily\cs{ab} \phantom{\cs{big}} (}&\quad\to\quad\hbox{\ttfamily\cs{phy@d@lxab} \phantom{\cs{big}} (}
% \end{align*}
% Then we meet two new commands --- \cs{phy@d@lxmb} and \cs{phy@d@lxab}. Syntax is as follows.
% \begin{align*}
%   &\hbox{\ttfamily\cs{phy@d@lxmb} \meta{biggg or *}
%     \meta{left delimiter} \meta{subformula} \meta{right delimiter}}\\
%   &\hbox{\ttfamily\cs{phy@d@lxab} \phantom{\meta{biggg or *}}
%     \meta{left delimiter} \meta{subformula} \meta{right delimiter}}
% \end{align*}
% Notice that \texttt{ab} and \texttt{mb} in the above commands are names of \cs{ab}'s
% two branches --- they are like namespaces. \cs{phy@d@lxmb} and \cs{phy@d@lxab} are
% defined by the following two lines:
% \begin{Verbatim}
% \phy@d@l@genxm{mb}
% \phy@d@l@genxa{ab}
% \end{Verbatim}
% \cs{phy@d@l@genxm} and \cs{phy@d@l@genxa} are defined as follows:
% \begin{align*}
%   & \macrodef {phy@d@l@genxm} [\#1: biggg or star branch name, \meta{mb}]
%     {%
%       \macrodef [12\ttwd] {phy@d@lx\meta{mb}} [\#\#1: biggg or star; \#\#2: left delimiter]
%         {%
%           \cs{begingroup}
%           \macroifelse {\#\#1 == star}
%             {\meta{temp} $\gets$ \cs{relax}}
%             {\meta{temp} $\gets$ \#\#1}
%           csname \{phy@\meta{mb}@\cs{string}\#\#2\} \meta{temp} \#\#2 \macrocr
%           \% requires an \cs{endgroup} after the right delimiter
%         }
%     } \\[1ex]
%     & \macrodef {phy@d@l@genxa} [\#1: automatic branch name, \meta{ab}]
%     {%
%       \macrodef [12\ttwd] {phy@d@lx\meta{ab}} [\#\#1: left delimiter]
%         {%
%           csname \{phy@\meta{ab}@\cs{string}\#\#1\} \#\#1
%         }
%     }
% \end{align*}
% So we can get
% \begin{align*}
%   \hbox{\ttfamily\cs{ab} \cs{big} (}&\quad\to\quad\hbox{\cs{begingroup} csname \{phy@mb@(\} \cs{big}\hskip2\ttwd\ \texttt(}\\
%   \hbox{\ttfamily\cs{ab} *\phantom{big} (}&\quad\to\quad\hbox{\cs{begingroup} csname \{phy@mb@(\} \cs{relax} \texttt(}\\
%   \hbox{\ttfamily\cs{ab} \phantom{\cs{big}} (}&\quad\to\quad\hbox{\hskip11\ttwd\ csname \{phy@ab@(\} \texttt(}
% \end{align*}
% The csnames above (\cs{phy@mb@(} and \cs{phy@ab@(}) are generated with \cs{phy@AB@gen}.
% \[ \hbox{\cs{phy@AB@gen} \marg{branch name} \meta{left delimiter} \marg{arg spec} \marg{definition}} \]
% If \meta{branch name} is \texttt{mb}, \marg{arg spec} should be |mr()|, where |m| is for biggg or star;
% If \meta{branch name} is \texttt{ab}, \marg{arg spec} should be |r()|.
% 
% Note: The ``|(|'' in the example above must not be replaced by a subformula braced by a pair of |{}|.
%
%
%
% \section{The \modu{xab} module}
%
% This is so simple. No need to comment a lot.
% 
% \begin{function}{\phy@xab@delcare}
%   \begin{syntax}
%     \cs{phy@xab@delcare} \meta{command} \meta{left delimiter} \meta{right delimiter}
%   \end{syntax}
%   This command used to define commands like \cs{pab}.
% \end{function}
%    \begin{macrocode}
%<*xab>
\ProvidesFile{phys.xab.sty}
  [2024/12/10 `xab' module of physics2]
\DeclareUnknownKeyHandler{\PassOptionsToPhysicsModule{\CurrentOption}{ab}}
\ProcessKeyOptions\relax
\RequirePhysicsModule{ab}
\def\phy@xab@delcare#1#2#3{%
  \DeclareDocumentCommand#1{so+m}{%
    \IfBooleanTF{##1}%
      {#2##3#3}%
      {\IfValueTF{##2}%
        {\csname##2l\endcsname#2##3\csname##2r\endcsname#3}%
        {\phy@ab@open#2##3\phy@ab@close#3}%
      }%
  }%
}
\phy@xab@delcare\pab\lparen\rparen
\phy@xab@delcare\bab\lbrack\rbrack
\phy@xab@delcare\Bab\lbrace\rbrace
\phy@xab@delcare\aab\langle\rangle
\phy@xab@delcare\vab\vert\vert
\phy@xab@delcare\Vab\Vert\Vert
%</xab>
%    \end{macrocode}
%
%
%
% \section{The \modu{ab.legacy} module}
%    \begin{macrocode}
%<*ab.legacy>
\ProvidesFile{phys.ab.legacy.sty}
  [2023/10/24 `ab.legacy' module of physics2]
\DeclareUnknownKeyHandler{\PassOptionsToPhysicsModule{\CurrentOption}{ab}}
\ProcessKeyOptions\relax
%    \end{macrocode}
%    \begin{macrocode}
\RequirePhysicsModule{xab}
\DeclareKeys{order.store=\phy@ab@ordersym}
\SetKeys{order=\mathcal{O}}
\ProcessKeyOptions\relax
\phy@xab@delcare\abs\vert\vert
\phy@xab@delcare\norm\Vert\Vert
\DeclareDocumentCommand\order{som}{%
  \phy@ab@ordersym
  \IfBooleanTF{#1}
    {(#3)}
    {\IfValueTF{#2}
      {\csname#2l\endcsname(#3\csname#2r\endcsname)}
      {\phy@ab@open(#3\phy@ab@close)}%
    }%
}
\phy@xab@delcare\eval.\vert
\phy@xab@delcare\peval(\vert
\phy@xab@delcare\beval[\vert
%</ab.legacy>
%    \end{macrocode}
% \endinput
