% \DeclareSourceFile{base}
%
% This file describes the \pkg{physics2} package (\file{physics2.sty}).
%
% \section{The \pkg{physics2} package}
%
%    \begin{macrocode}
%<@@=phy>
%    \end{macrocode}
%
% \subsection{API}\label{subsec:api.physics2}
%
% \begin{variable}{\phy@tempcnta,\phy@tempdima,\phy@tempdimb,\phy@tempskipa,
%   \phy@tempmuskipa,\phy@tempboxa,\ifphy@tempswa,\phy@temptoksa}
% Common temporary variables that can be shared by any module.
% \end{variable}
%
% \begin{variable}{\l_@@_tmpa_int,\l_@@_tmpb_int,\l_@@_tmpa_tl,\l_@@_tmpb_tl}
% Common temporary variables (L3 style) that can be shared by any module.
% \end{variable}
%
% \begin{variable}{\l_@@_pass_a_tl}
% Temporary token list variables. They are used as arguments to be passed.
% Their value may be changed very frequently, so their lifespan must be very short.
% Once their values are modified, they should be used immediately.
% Once they are used, they should be considered destroyed, 
% regardless of whether functions like \cs{tl_gclear:N} are actually used
% to clear their values.
% \end{variable}
%
% \begin{function}{\usephysicsmodule,\RequirePhysicsModule}
% \begin{syntax}
% \cs{usephysicsmodule} \oarg{key-val options} \marg{module} \oarg{date}
% \cs{RequirePhysicsModule} \oarg{key-val options} \marg{module} \oarg{date}
% \end{syntax}
% Loads modules. The usage is the same as \cs{RequirePackage}.
% \cs{usephysicsmodule} is a user command, and \cs{RequirePhysicsModule} is a
% developer command.
% \relatedint{phy@modulewithdate}
% \end{function}
%
% \begin{function}{\PassOptionsToPhysicsModule}
% \begin{syntax}
% \cs{PassOptionsToPhysicsModule} \marg{option list} \marg{module}
% \end{syntax}
% Passes options to a module. For example,
% \begin{verbatim}
% \PassOptionsToPhysicsModule{foo=bar}{baz}
% \RequirePhysicsModule{baz}
% \end{verbatim}
% is equivalent to
% \begin{verbatim}
% \RequirePhysicsModule[foo=bar]{baz}
% \end{verbatim}
% \end{function}
%
% \begin{variable}{\phy@ModBoolA,\phy@ModBoolB}
% Booleans used when handling key-value options of a module. They are set false
% when a module is loaded.
% \end{variable}
%
% \begin{function}{\PhysicsModuleError,\PhysicsModuleWarning}
% \begin{syntax}
% \cs{PhysicsModuleError} \marg{module} \marg{error message} \marg{help message}
% \cs{PhysicsModuleWarning} \marg{module} \marg{warning message}
% \end{syntax}
% Error and warning handlers for modules of this package.
% \end{function}
%
% \begin{function}{\delopen,\delclose}
% \begin{syntax}
% \cs{delopen} \meta{left delimiter} \meta{math mode material} \cs{delclose} \meta{right delimiter}
% \end{syntax}
% Re-packaged \cs{left} and \cs{right}. A \cs{left} and \cs{right} pair will
% be treated as an inner formula, around which 3\,mu skips are inserted. If
% you don't want the skips, use \cs{delopen} and \cs{delclose} instead.
% \end{function}
%
% \begin{function}{\phy@mathvphantom,\@@_math_vphantom:n}
% \begin{syntax}
% \cs{phy@mathvphantom} \marg{math mode material}
% \cs{@@_math_vphantom:n} \marg{math mode material}
% \end{syntax}
% A math mode version of \cs{vphantom}.
% \relatedint{phy@mathvph@ntom}
% \end{function}
%
% \subsection{Internal commands}
%
% \begin{function}{\phy@modulewithdate}
% \begin{syntax}
% \cs{phy@modulewithdate} \oarg{keyval options} \marg{module} \oarg{date}
% \end{syntax}
% Loads a module with keyval options and a specific date.
% \relatedint{phy@ResetModBools}
% \begin{NOTE}
% Hint:
% \cs{@onefilewithoptions}\marg{filename}\oarg{options}\oarg{date}\marg{extension}
% \end{NOTE}
% \end{function}
%
% \begin{function}{\phy@ResetModBools}
% \begin{syntax}
% \cs{phy@ResetModBools}
% \end{syntax}
% Sets all booleans for handling modules' key-value options (like \cs{phy@ModBoolA})
% false. It's called every time a separate module is loaded.
% \end{function}
%
% \begin{function}{\phy@m@thvphantom}
% \begin{syntax}
% \cs{phy@m@thvphantom} \meta{math style command} \marg{math mode material}
% \end{syntax}
% Generate a zero-width box with the height and depth of the math material in a
% specific math style. \meta{math style command} is \cs[no-index]{displaystyle}, etc.
% \end{function}
%
% \begin{function}{\@@_reset_math_class:nnn}
% \begin{syntax}
% \cs{@@_reset_math_class:nn} \marg{charcode} \marg{previous math class} \marg{new math class}
% \end{syntax}
% Incomplete.
% \end{function}
%
% \begin{function}{\@@_patch_unimath:}
% \begin{syntax}
% \cs{@@_patch_unimath:}
% \end{syntax}
% Patch for \pkg{unicode-math}. The current functions are
% \begin{itemize}
% \item Making \cs{vert} different from ``\texttt{\char`\|}'' in math mode.
% \end{itemize}
% See \S\ref{subsec:code.base} for details.
% \end{function}
%
% \begin{function}{\@@_patch_no_unimath_common:,\@@_patch_mathtools:}
% \begin{syntax}
% \cs{@@_patch_no_unimath_common:}
% \end{syntax}
% See \S\ref{subsec:code.base} for details.
% \end{function}
%
% \begin{function}{\@@_patch_amsmath:}
% \end{function}
%
% \subsection{Code implementation}\label{subsec:code.base}
%
%    \begin{macrocode}
%<*package>
\NeedsTeXFormat{LaTeX2e}[2024/11/01]
\ProvidesPackage{physics2}
  [2025/03/01 v2.0.0 Tools for typesetting math formulae.]
%    \end{macrocode}
%
% \begin{macro}[int]{\phy@tempcnta,\phy@tempdima,\phy@tempdimb,
%                    \phy@tempskipa,\phy@tempmuskipa,\phy@tempboxa,
%                    \ifphy@tempswa,\phy@temptoksa}
%    \begin{macrocode}
\newcount  \phy@tempcnta
\newdimen  \phy@tempdima
\newdimen  \phy@tempdimb
\newskip   \phy@tempskipa
\newmuskip \phy@tempmuskipa
\newbox    \phy@tempboxa
\newif     \ifphy@tempswa
\newtoks   \phy@temptoksa
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[int]{\phy@ModBoolA,\phy@ModBoolB}
%    \begin{macrocode}
\newif     \ifphy@ModBoolA
\newif     \ifphy@ModBoolB
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\PhysicsModuleError}
%    \begin{macrocode}
\gdef\PhysicsModuleError#1#2#3{%
  \GenericError{%
    (phys.#1)\@spaces\@spaces\@spaces\@spaces
  }{%
    Module #1 (of physics2) Error: #2%
  }{%
    See the physics2 package documentation (texdoc physics2) for explanation.%
  }{#3}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\PhysicsModuleWarning}
%    \begin{macrocode}
\def\PhysicsModuleWarning#1#2{%
  \GenericWarning{%
    (phys.#1)\@spaces\@spaces\@spaces\@spaces
  }{%
    Module #1 (of physics2) Warning: #2%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\usephysicsmodule, \RequirePhysicsModule}
%    \begin{macrocode}
\def\usephysicsmodule{\@ifnextchar[%]
  {\phy@modulewithopt}{\phy@modulewithopt[]}}
\let\RequirePhysicsModule\usephysicsmodule
\@onlypreamble\usephysicsmodule
\def\phy@modulewithopt[#1]#2{\@ifnextchar[%]
  {\phy@modulewithdate[{#1}]#2}{\phy@modulewithdate[{#1}]#2[]}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phy@modulewithdate}
%    \begin{macrocode}
\def\phy@modulewithdate[#1]#2[#3]{%
  \def\reserved@b##1,{%
    \ifx\@nnil##1\relax\else
      \ifx\@nnil##1\@nnil\else
        \phy@ResetModBools
        \noexpand\@onefilewithoptions{phys.##1}[{\unexpanded{#1}}][{#3}]%
        \noexpand\@pkgextension
      \fi
      \expandafter\reserved@b
    \fi}%
    \edef\reserved@a{\zap@space#2 \@empty}%
    \edef\reserved@a{\expandafter\reserved@b\reserved@a,\@nnil,}%
  \reserved@a}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\PassOptionsToPhysicsModule}
%    \begin{macrocode}
\def\PassOptionsToPhysicsModule#1#2{\@pass@ptions\@pkgextension{#1}{phys.#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phy@mathvphantom,\phy@mathvph@ntom}
%    \begin{macrocode}
\def\phy@mathvphantom#1{%
  \setbox\phy@tempboxa=\null%
  \mathpalette\phy@mathvph@ntom{#1}%
}
\def\phy@mathvph@ntom#1#2{%
  \setbox\@tempboxa\hbox{$#1#2$}%
  \ht\phy@tempboxa=\ht\@tempboxa
  \dp\phy@tempboxa=\dp\@tempboxa
  \box\phy@tempboxa
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\delopen,\delclose}
%    \begin{macrocode}
\protected\def\delopen{\mathopen{}\mathclose\bgroup\left}
\protected\def\delclose{\aftergroup\egroup\right}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}
%
% \begin{macro}[int]{\l_@@_tmpa_int,\l_@@_tmpb_int,
%                    \l_@@_tmpa_tl,\l_@@_tmpb_tl,\l_@@_pass_a_tl,
%                    \g_@@_debug_mode_bool,
%                    \l_@@_module_a_bool,\l_@@_module_b_bool}
%    \begin{macrocode}
\int_new:N  \l_@@_tmpa_int
\int_new:N  \l_@@_tmpb_int
\tl_new:N   \l_@@_tmpa_tl
\tl_new:N   \l_@@_tmpb_tl
\tl_new:N   \l_@@_pass_a_tl
\bool_new:N \g_@@_debug_mode_bool
\bool_new:N \l_@@_module_a_bool
\bool_new:N \l_@@_module_b_bool
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phy@ResetModBools}
% See \cs{phy@modulewithdate}.
%    \begin{macrocode}
\protected \def \phy@ResetModBools
  {
    \global \phy@ModBoolAfalse
    \global \phy@ModBoolBfalse
    \bool_gset_false:N \l_@@_module_a_bool
    \bool_gset_false:N \l_@@_module_b_bool
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[TF]{\@@_cs_if_exist:c}
% This is faster than \cs{cs_if_exist:cTF}, 20\% in \hologo{pdfTeX}, 5\% in
% \hologo{LuaTeX} and 20\% in \hologo{XeTeX} (tested on 
% \href{https://www.texpage.com}{\TeX Page}). This command contains only one
% bool check, one less than \cs{cs_if_exist:cTF}, which makes it faster.
%    \begin{macrocode}
\prg_set_conditional:Npnn \@@_cs_if_exist:c #1 { TF }
  {
    \if_cs_exist:w #1\cs_end:
      \prg_return_true: \else: \prg_return_false: \fi:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[TF]{\@@_if_token_eq:c}
% An alias of \cs{cs_if_eq:NN}.
%    \begin{macrocode}
\prg_set_conditional:Npnn \@@_if_token_eq:NN #1#2 { TF }
  {
    \if_meaning:w #1#2
      \prg_return_true: \else: \prg_return_false: \fi:
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_math_vphantom:n}
%    \begin{macrocode}
\cs_set_eq:NN \@@_math_vphantom:n \phy@mathvphantom
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\DeclareBiggg,\@@_declare_biggg:Nn}
%    \begin{macrocode}
\cs_set_nopar:Npn \DeclareBiggg #1#2
  {
    \AddToHook { begindocument/before }
      { \@@_declare_biggg:Nn #1 {#2} }
  }
\cs_set_nopar:Npn \@@_declare_biggg:Nn #1#2
  {
    \cs_set_protected_nopar:Npn #1 { \bBigg@ { #2 } }
    \cs_set:Npe \l_@@_tmpa_tl
      { \exp_after:wN \use_none:n \token_to_str:N #1 }
    \cs_set_protected_nopar:cpn { \l_@@_tmpa_tl l } { \mathopen  #1 }
    \cs_set_protected_nopar:cpn { \l_@@_tmpa_tl m } { \mathrel   #1 }
    \cs_set_protected_nopar:cpn { \l_@@_tmpa_tl r } { \mathclose #1 }
    \cs_set_nopar:cpn { @@_chk_big_ \string #1 : } { }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\AutoDeclareBiggg,\@@_declare_biggg_auto:N,\@@_biggg_parse:w}
%    \begin{macrocode}
\cs_set_nopar:Npn \AutoDeclareBiggg #1
  {
    \AddToHook { begindocument/before }
      { \@@_declare_biggg_auto:N {#1} }
  }
\cs_set_nopar:Npn \@@_declare_biggg_auto:N #1
  {
    \group_begin:
    \tl_set:Ne \l_@@_tmpa_tl { \cs_to_str:N #1 }
    \exp_after:wN \@@_biggg_parse:w \l_@@_tmpa_tl \q_stop
    \group_end:
    \exp_args:NNe \@@_declare_biggg:Nn #1 { \l_@@_pass_a_tl }
  }
\cs_set_nopar:Npn \@@_biggg_parse:w #1#2#3 \q_stop
  {
    \int_zero:N \l_@@_tmpa_int
    \int_zero:N \l_@@_tmpb_int
    \tl_map_inline:nn { #3 }
      {
        \int_incr:N \l_@@_tmpa_int
        \token_if_eq_charcode:NNT ##1 g { \int_incr:N \l_@@_tmpb_int }
      }
    \bool_lazy_all:nF
      {
        {
          \bool_lazy_or_p:nn
            { \token_if_eq_charcode_p:NN #1 B }
            { \token_if_eq_charcode_p:NN #1 b }
        }
        { \token_if_eq_charcode_p:NN #2 i }
        { \int_compare_p:nNn \l_@@_tmpa_int = \l_@@_tmpb_int }
      }
      {
        \PackageError {physics2}
          {
            Invalid~argument~of~\string\DeclareBiggg :~#1#2#3
          }
          {
            The~argument~of~\string\DeclareBiggg\space should~be~like~
            \string\Biggg\space or~\string\biggg.
          }
      }
    \tl_gset:Ne \l_@@_pass_a_tl { \int_use:N \l_@@_tmpa_int }
    \token_if_eq_charcode:NNT #1 B { \tl_gput_right:Nn \l_@@_pass_a_tl { .5 } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_declare_biggg:}
%    \begin{macrocode}
\cs_set_nopar:Npn \@@_declare_biggg:
  {
    \cs_set_nopar:cpn { @@_chk_big_ \string * : } { }
    \@@_declare_biggg:Nn \big   { 1   }
    \@@_declare_biggg:Nn \Big   { 1.5 }
    \@@_declare_biggg:Nn \bigg  { 2   }
    \@@_declare_biggg:Nn \Bigg  { 2.5 }
    \@@_declare_biggg:Nn \biggg { 3   }
    \@@_declare_biggg:Nn \Biggg { 3.5 }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_reset_math_class:nnn}
%    \begin{macrocode}
\cs_set_nopar:Npn \@@_reset_math_class:nnn #1#2#3
  { }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_patch_unimath:}
% \pkg{unicode-math} makes control sequences for math symbols the same as the
% symbols themselves. For example, \cs{vert} and ``\texttt{\char`\|}'' are
% \cs{cs_gset_eq:NN}'ed (or \cs{global}\cs{let}) to be same.
% See \cs{__um_define_math_chars:} in \texttt{um-code-setchar.dtx}.
%
% In \modu{ab.braket} module of this package, we need \cs{vert} and
% ``\texttt{\char`\|}'' to be different. So here we make \cs{vert} defined to
% be a ``\texttt{\char`\|}'' with catcode 12 with \cs{xdef}. Then the meaning
% of ``\texttt{\char`\|}'' is character ``\texttt{\char`\|}'' itself, and the
% meaning of \cs{vert} is a \cs{protected}\cs{long} macro whose expansion is
% ``\texttt{\char`\|}''.
%    \begin{macrocode}
\cs_set_nopar:Npn \@@_patch_unimath:
  {
    \cs_gset_protected_nopar:Npe \vert { \char_generate:nn {"007C} {12} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_patch_no_unimath_common:}
% In \LaTeXe\ kernel, \cs{vert} and \cs{|} are defined to be same, with
% \cs{DeclareMathDelimiter}. In \modu{ab.braket} module of this package, we
% also need \cs{vert} and \cs{|} to be different. So we use the same method
% as \cs{@@_patch_unimath:}.
%    \begin{macrocode}
\cs_set_nopar:Npn \@@_patch_no_unimath_common:
  {
    \cs_gset_protected_nopar:Npn \| { \Vert }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_patch_amsmath:}
%    \begin{macrocode}
\cs_set_nopar:Npn \@@_patch_amsmath:
  {
    \RequirePhysicsModule { patch.amsmath }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\@@_patch_mathtools:}
% \cs{lparen} and \cs{rparen} are defined in \pkg{mathtools} or
% \pkg{unicode-math}. If users didn't load any of them, we define them here.
% The reason why we need to define them is that modules like \modu{ab} need
% them.
%    \begin{macrocode}
\cs_set_nopar:Npn \@@_patch_mathtools:
  {
    \cs_set_protected_nopar:Npe \lparen { ( }
    \cs_set_protected_nopar:Npe \rparen { ) }
  }
%    \end{macrocode}
% \end{macro}
%
% The options of \pkg{physics2}. We use \cs{phy@ResetModBools} instead of
% \cs{SetKeys}\marg{k-v defaults} to make it a little faster to compile.
%    \begin{macrocode}
\DeclareKeys
  {
    debug-mode     .bool_gset:N = \g_@@_debug_mode_bool ,
    debug-mode-on  .code:n = { \bool_gset_true:N  \g_@@_debug_mode_bool } ,
    debug-mode-on  .value_forbidden:n = true ,
    debug-mode-off .code:n = { \bool_gset_false:N \g_@@_debug_mode_bool } ,
    debug-mode-off .value_forbidden:n = true ,
    tight-braces   .legacy_if_set:n = phy@ModBoolB ,
    tight-braces   .default:n = true
  }
\SetKeys
  {
    debug-mode   = true ,
    tight-braces = true
  }
\ProcessKeyOptions \relax
\ifphy@ModBoolB
  \tl_set_eq:NN \g_@@_left_token  \delopen
  \tl_set_eq:NN \g_@@_right_token \delclose
\else
  \tl_set_eq:NN \g_@@_left_token  \left
  \tl_set_eq:NN \g_@@_right_token \right
\fi
\tl_set_eq:NN \phy@left@tl  \g_@@_left_token
\tl_set_eq:NN \phy@right@tl \g_@@_right_token
%    \end{macrocode}
%
% Modules of \pkg{physics2} would use the following math symbol commands:
% \begin{center}
% \begin{minipage}{.6\textwidth}
% \def\from#1{\textsuperscript{\textit{\textsf{#1}}}}%
% \hfil
% \begin{tabular}{lll}
% \hline
% & \cs{lparen}\from{m} & \cs{rparen}\from{m} \\
% & \cs{lbrack}         & \cs{rbrack}         \\
% & \cs{lbrace}         & \cs{rbrace}         \\
% & \cs{langle}         & \cs{rangle}         \\
% \cs{vert} & \cs{lvert}\from{a} & \cs{rvert}\from{a} \\
% \cs{Vert} & \cs{lVert}\from{a} & \cs{rVert}\from{a} \\
% \hline
% \end{tabular}%
% \hfil\par
% \from{a}Defined in \pkg{amsmath}   \par
% \from{m}Defined in \pkg{mathtools} \par
% \end{minipage}
% \end{center}
% If users load \pkg{unicode-math}, \pkg{unicode-math} would define these
% commands. If not, note that we cannot use them directly because some of
% them are not defined in \LaTeXe\ kernel. Some of them are defined in
% \pkg{amsmath} and some are defined in \pkg{mathtools}. We need to define
% those undefined in \pkg{physics2}. \pkg{mathtools} loads \pkg{amsmath}
% automatically, so those defined in \pkg{amsmath} needn't be defined again
% if \pkg{mathtools} is loaded. But if \pkg{amsmath} is loaded but \pkg{mathtools}
% is not, we need to define those defined in \pkg{mathtools} but not in
% \pkg{amsmath}. We need to make a patch for this, whose code is to define
% these commands if one or some of them are not defined, that is, if at least
% one of \pkg{unicode-math}, \pkg{mathtools} and \pkg{amsmath}, is not loaded.
% First we need to check if \pkg{unicode-math} is loaded, then \pkg{mathtools},
% and finally \pkg{amsmath}. So we get
% \begin{verbatim}
% \IfPackageLoadedF { unicode-math }
%   {
%     \IfPackageLoadedF { mathtools }
%       {
%         \@@_patch_mathtools:   % -> to define \lparen, \rparen
%         \IfPackageLoadedF { amsmath }
%           {
%             \@@_patch_amsmath: % -> to define \lvert, \rvert, \lVert, \rVert
%           }
%       }
%   }
% \end{verbatim}
% Those packages could be loaded after \pkg{physics2}, so it's better to delay
% the code to the end of preamble.
%
% \pkg{unicode-math} can be loaded before or after \pkg{physics2}, so if we
% want to check if \pkg{unicode-math} is loaded, it's better to delay the code
% to the end of preamble.
%
% What's more, \pkg{unicode-math} delays the definition
% of math symbols (\cs{__um_define_math_chars:}) after the \env{document}
% environment begins. In order to make the patch work, we need to delay the
% patch after \cs{__um_define_math_chars:}. That's why we use \cs{AtBeginDocument}
% in the true branch of \cs{IfPackageLoadedTF} in the following code.
% 
% If \pkg{unicode-math} is loaded, execute \cs{@@_patch_unimath:}.
% \cs{@@_patch_unimath:} contains code to redefine math symbol commands, 
% and \pkg{unicode-math} defines math symbols with \cs{__um_define_math_chars:}
% after \env{document} begins. So we need to execute \cs{@@_patch_unimath:}
% after \cs{__um_define_math_chars:}. That's why we use \cs{AtBeginDocument}
% in the following code.
%    \begin{macrocode}
\AddToHook { begindocument/before }
  {
    \IfPackageLoadedTF { unicode-math }
      {
        \AddToHook { begindocument } { \@@_patch_unimath: }
      }
      {
        \@@_patch_no_unimath_common:
        \IfPackageLoadedF { mathtools }
          {
            \@@_patch_mathtools:
            \IfPackageLoadedF { amsmath }
              {
                \@@_patch_amsmath:
              }
          }
      }
    \@@_declare_biggg:
    \bool_if:NT \g_@@_debug_mode_bool
      { \RequirePhysicsModule { helper } }
  }
%    \end{macrocode}
%
%    \begin{macrocode}
\ExplSyntaxOff
%<@@=>
%</package>
%    \end{macrocode}
%
% \endinput
